syntax = "proto3";

package aapis.orchestrator.v1;

message Mp4Job {
    // Input file to convert
    oneof input {
        string input_path = 1;
        int64 job_id_input = 2;
    }
    // Mp4 file to output
    string output_path = 3;
}

message Mp4UniteJob {
    // Mp4 files to unite (in order)
    repeated string input_paths = 1;
    repeated int64 job_id_inputs = 2;
    // Mp4 file to output
    string output_path = 3;
}

message ScrapeJob {
    // URL to do the scraping on
    string url = 1;
    // XPath to limit the scraping scope
    string xpath = 2;
    // Path to scrape the files into
    string output_path = 3;
}

message KickoffJobRequest {
    // Priority level of the job (0 = highest)
    int64 priority = 1;
    // Jobs that must complete before this one can begin
    // Dependencies can also be inferred by the jobs themselves instead
    repeated int64 blocking_job_ids = 2;
    // The job type to kick off
    oneof job {
        Mp4Job mp4 = 3;
        Mp4UniteJob mp4_unite = 4;
        ScrapeJob scrape = 5;
    }
}

message KickoffJobResponse {
    // Whether the job could be kicked off
    bool success = 1;
    // Error message, if applicable
    string message = 2;
    // Unique ID (per session) for the job (returns -1 if error)
    int64 job_id = 3;
}

enum JobStatus {
    JOB_STATUS_UNSPECIFIED = 0;
    JOB_STATUS_INVALID = 1;
    JOB_STATUS_COMPLETE = 2;
    JOB_STATUS_QUEUED = 3;
    JOB_STATUS_ACTIVE = 4;
    JOB_STATUS_ERROR = 5;
    JOB_STATUS_BLOCKED = 6;
    JOB_STATUS_PAUSED = 7;
    JOB_STATUS_CANCELED = 8;
}

message JobStatusRequest {
    // Job to get the status of
    int64 job_id = 1;
}

message JobStatusResponse {
    // Status of the requested job
    JobStatus status = 1;
    // Status message
    string message = 2;
}

message JobsSummaryStatusRequest {}

message JobsSummaryStatusResponse {
    // Number of jobs that have been completed
    int64 num_completed_jobs = 1;
    // List of job ids that have been completed
    repeated int64 completed_jobs = 2;
    // Number of jobs currently queued
    int64 num_queued_jobs = 3;
    // List of job ids that are queued
    repeated int64 queued_jobs = 4;
    // Number of jobs currently active
    int64 num_active_jobs = 5;
    // List of job ids that are active
    repeated int64 active_jobs = 6;
    // Number of jobs currently blocked
    int64 num_blocked_jobs = 7;
    // List of job ids that are blocked
    repeated int64 blocked_jobs = 8;
    // Number of jobs currently paused
    int64 num_paused_jobs = 9;
    // List of job ids that are paused
    repeated int64 paused_jobs = 10;
    // Number of jobs discarded
    int64 num_discarded_jobs = 11;
    // List of job ids that are discarded
    repeated int64 discarded_jobs = 12;
}

message PauseJobsRequest {}

message PauseJobsResponse {
    bool success = 1;
    string message = 2;
}

message ResumeJobsRequest {}

message ResumeJobsResponse {
    bool success = 1;
    string message = 2;
}

message CancelJobRequest {
    int64 job_id = 1;
}

message CancelJobResponse {
    bool success = 1;
    string message = 2;
}

service OrchestratorService {
    rpc KickoffJob (KickoffJobRequest) returns (KickoffJobResponse) {}
    rpc JobStatus (JobStatusRequest) returns (JobStatusResponse) {}
    rpc JobsSummaryStatus (JobsSummaryStatusRequest) returns (JobsSummaryStatusResponse) {}
    rpc PauseJobs (PauseJobsRequest) returns (PauseJobsResponse) {}
    rpc ResumeJobs (ResumeJobsRequest) returns (ResumeJobsResponse) {}
    rpc CancelJob (CancelJobRequest) returns (CancelJobResponse) {}
}
